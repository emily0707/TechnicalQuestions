Two pointers Approach O(N)

the area formed between the lines will always be limited by the height of the shorter line. 
the farther the lines, the more will be the area obtained. 

Therefore, two pointers approach, one at the beginning and one at the end of the array constituting the length of the lines. 
a variable maxArea. 

Keep update maxArea and move the ptr to the shorter line towards the other end by one step. 
If we try to move the pointer at the longer line inwards, we won't gain any increase in area, since it is limited by the shorter line. But
moving the shorter line’s pointer could turn out to be beneficial despite the reduction in the width. 

simple ptr moving logic: 
Initially: left = 0; right = n-1;
  a[left] < a[right], left++
  a[left] >= a[right], right--
end: left> right 


•Time complexity : O(n)O(n)O(n). Single pass.
•Space complexity : O(1)O(1)O(1). Constant space is used.


       
 public int maxArea(int[] height) {    
 int left = 0, right = height.length - 1; int maxArea = 0;
 while (left < right) {  
    maxArea = Math.max(maxArea, Math.min(height[left], height[right])    * (right - left));  
     if (height[left] < height[right])  
         left++;  
     else   
         right--; }
 return maxArea;}

